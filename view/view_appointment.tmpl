{{define "Head"}}
    <title>Rendez-vous #232</title>
<style>
    .container {
      max-width: 1200px;
      margin: 1rem auto;
    }
    
    .card {
      max-width: 1000px;
      margin: 0 auto;
      background-color: var(--card-color);
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
      overflow: hidden;
    }
    
    .card-header {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      position: relative;
    }
    
    .card-title {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .card-description {
      color: var(--text-color-helper);
      font-size: .9rem;
    }
    
    .status-badge {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: .85rem;
      font-weight: 500;
    }
    
    .status-badge.confirmed {
      background-color: #dcfce7;
      color: #166534;
    }
    
    .status-badge.pending {
      background-color: #fef3c7;
      color: #92400e;
    }
    
    .status-badge.completed {
      background-color: #dbeafe;
      color: #1e40af;
    }
    
    .status-badge.cancelled {
      background-color: #ffbdbd;
      color: #b91c1c;
    }
    
    .card-content {
      padding: 1.25rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      font-size: .9rem;
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-color);
    }
    
    .input-wrapper {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: .5rem;
    }
    
    .input-icon {
      width: 1rem;
      height: 1rem;
      color: #6b7280;
    }
    
    .form-input {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border-radius: 0.375rem;
      font-size: .9rem;
    }
    
    .form-select {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      font-size: .9rem;
      background-color: white;
      outline: none;
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.5rem center;
      background-size: 1.5em 1.5em;
    }
    
    .form-select:focus {
      border-color: #8483dc;
      box-shadow: 0 0 0 2px rgba(132, 131, 220, 0.2);
    }
    
    .checkbox-group {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: .7rem;
      margin-top: 0.5rem;
    }
    
    .checkbox-wrapper {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .form-checkbox {
      width: 1rem;
      height: 1rem;
      border-radius: 0.25rem;
      border: 1px solid #d1d5db;
      appearance: none;
      background-color: white;
      cursor: pointer;
    }
    
    .form-checkbox:checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: center;
      background-size: 0.75rem;
    }
    
    .checkbox-label {
      font-size: .9rem;
      color: var(--text-color);
      width: 100%;
    }
    
    .card-footer {
      padding: 1.25rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .btn {
      padding: 0.625rem .5rem;
      border-radius: 0.375rem;
      font-size: .9rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.15s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .btn-success {
      background-color: #10b981;
      color: white;
      border: none;
    }
    
    .btn-success:hover {
      background-color: #059669;
    }
    
    .helper-text {
      font-size: .85rem;
      color: #6b7280;
      margin-top: 0.25rem;
    }
    
    .info-group {
      margin-bottom: 1.5rem;
    }
    
    .info-label {
      font-size: .85rem;
      font-weight: 500;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 0.25rem;
    }
    
    .info-value {
      font-size: .9rem;
      color: #111827;
    }
    
    .employee-select {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
      margin-top: 0.5rem;
        .employee{
            display: grid;
            grid-template-columns: .2fr 1fr .1fr;
            gap: .5rem;
            line-height: 3rem;
            align-items: center;
            .photo{
                height: 3rem;
                aspect-ratio: 1/1;
                border-radius: 50%;
                border: 1px solid var(--border-color);
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .radioBtn{
                outline: none;
                &:focus{
                    box-shadow: none;
                    outline: none;
                }
            }
            .name:has(+ .radioBtn:checked) {
                font-weight: 700;
            }
        }
    }
    
    .employee-option {
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .employee-option:hover {
      border-color: #8483dc;
      box-shadow: 0 0 0 2px rgba(132, 131, 220, 0.2);
    }
    
    .employee-option.selected {
      border-color: #8483dc;
      box-shadow: 0 0 0 2px rgba(132, 131, 220, 0.2);
    }
    
    .employee-option img {
      width: 100%;
      aspect-ratio: 1;
      object-fit: cover;
    }
    
    .employee-option-info {
      padding: 0.75rem;
      text-align: center;
    }
    
    .employee-option-name {
      font-weight: 500;
      font-size: .9rem;
      color: #111827;
    }
    
    .employee-option-role {
      font-size: .85rem;
      color: #6b7280;
    }
    
    .time-slots {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 0.5rem;
      margin-top: 0.5rem;
      .btn{
          padding-inline: 1rem;
          &[disabled]{
              background-color: #e9e9e9;
          }
          &[selected]{
              background-color: var(--primary-color);
              font-weight: 600;
          }
      }
    }
    
    .client-info {
      border-radius: 0.375rem;
      padding: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .client-info-title {
      font-size: 0.9rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .client-info-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }
    
    .client-info-item {
      display: flex;
      flex-direction: column;
    }
    
    .client-info-label {
      font-size: 0.9rem;
      color: var(--text-color-helper);
    }
    
    .client-info-value {
      font-size: 1rem;
      color: var(--text-color);
    }
    
    .summary-section {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 1px solid var(--border-color);
    }
    
    .summary-title {
      font-size: 1rem;
      font-weight: 500;
      margin-bottom: 0.75rem;
    }
    
    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      font-size: .9rem;
    }
    
    .summary-label {
      color: var(--text-color-helper);
    }
    
    .summary-value {
      font-weight: 500;
    }

    .modal-overlay {
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 50;
        display: none;
        .modal {
            background-color: var(--card-color);
            border-radius: 0.5rem;
            width: 90%;
            max-width: 28rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            color: var(--text-color);
            .modal-header {
                padding: 1rem 1.5rem;
                border-bottom: 1px solid var(--border-color);
                .modal-title {
                  font-size: 1.125rem;
                  font-weight: 600;
                }
            }
            .modal-body {
                padding: 1.5rem;
                .modal-text {
                  font-size: 0.95rem;
                  color: var(--text-color-helper);
                  margin-bottom: 1rem;
                }
            }
            .modal-footer {
              padding: 1rem 1.5rem;
              border-top: 1px solid var(--border-color);
              display: flex;
              justify-content: flex-end;
              gap: 0.75rem;
            }
        }
    }
    
    
    @media (max-width: 768px) {
      .employee-select {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .time-slots {
        grid-template-columns: repeat(3, 1fr);
      }
      
      .client-info-grid {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 640px) {
      .checkbox-group {
        grid-template-columns: 1fr;
      }
      
      .employee-select {
        grid-template-columns: 1fr;
      }
      
      .time-slots {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .card-footer {
        flex-direction: column;
      }
      
      .btn {
        width: 100%;
      }
    }
  </style>
{{end}}

{{define "Body"}}
{{$serviceId := .Appointment.Service}}
{{$employeeId := .Appointment.EmployeeId}}
<div class="container">
    <div class="card">
      <div class="card-header">
        <h1 class="card-title">Rendez-vous #12345</h1>
        <p class="card-description">Gérer les détails du rendez-vous</p>
        <div class="status-badge {{if eq .Appointment.Status "Confirmé"}}confirmed{{else if eq .Appointment.Status "Terminé"}}completed{{else if eq .Appointment.Status "Annulé"}}cancelled{{end}}" 
        id="status-badge">{{.Appointment.Status}}</div>
      </div>
      <form id="appointment-form">
        <div class="card-content">
          <!-- Informations du client -->
          <div class="client-info">
            <h3 class="client-info-title">Informations du client</h3>
            <div class="client-info-grid">
              <div class="client-info-item">
                <span class="client-info-label">Nom</span>
                <span class="client-info-value">{{.Appointment.CustomerName}}</span>
              </div>
              <div class="client-info-item">
                <span class="client-info-label">Téléphone</span>
                <span class="client-info-value">{{.Customer.Phone}}</span>
              </div>
              <div class="client-info-item">
                <span class="client-info-label">Email</span>
                <span class="client-info-value">{{.Customer.Email}}</span>
              </div>
              <div class="client-info-item">
                <span class="client-info-label">Date de création</span>
                <span class="client-info-value">15/04/2023 à 14:30</span>
              </div>
            </div>
          </div>
          
          {{if eq .Appointment.Status "Confirmé"}}
          <!-- Sélection de l'employé -->
          <div class="form-group">
            <label class="form-label">Employé assigné</label>
            <div class="input-wrapper">
              <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
              <span class="helper-text">Modifiez l'employé assigné à ce rendez-vous</span>
            </div>
            <div class="employee-select">
                {{range .Employee}}
                    <label for="{{.Id}}{{.Name}}" class="employee">
                        <p class="photo">{{.ShortName}}</p>
                        <p class="name">{{.Name}}</p>
                        <input class="radioBtn" type="radio" id="{{.Id}}{{.Name}}" name="employee" value="{{.Id}}" {{if eq .Id $employeeId}}checked{{end}} />
                    </label>
                {{end}}
            </div>
          </div>
           
          <!-- Sélection des services -->
          <div class="form-group">
            <label class="form-label">Services réservés</label>
            <div class="input-wrapper">
              <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
              </svg>
              <span class="helper-text">Modifiez les services réservés pour ce rendez-vous</span>
            </div>
            <div class="checkbox-group">
                {{range $index, $element := .Service}}
                    <div class="checkbox-wrapper">
                      <input type="checkbox" id="{{$element.Id}}{{$element.Name}}" name="service[$index]" value="{{$element.Id}}" class="form-checkbox" {{if $element.Checked}}checked{{end}}
                      onchange="onServiceChange(this)">
                      <label for="{{$element.Id}}{{$element.Name}}" class="checkbox-label">{{$element.Name}} ({{$element.CurrencyPrice}})</label>
                    </div>
                {{end}}
            </div>
          </div>
          
          <!-- Sélection de la date et de l'heure -->
          <div class="form-group">
            <label class="form-label">Date et heure du rendez-vous</label>
            <div class="input-wrapper">
              <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <span class="helper-text">Modifiez la date et l'heure du rendez-vous</span>
            </div>
            <div class="date-time-grid">
              <div style="margin-bottom: .5rem;">
                <label for="date" class="form-label">Date</label>
                <input type="date" id="date" name="date" class="form-input" value="{{slice .Appointment.Date 0 10}}" required 
                hx-put="/etablissement/{{.Appointment.EtablishmentId}}/rendez-vous/noveau" hx-trigger="change" hx-ext="json-enc-custom" hx-target=".time-slots">
              </div>
              <div>
                <label class="form-label">Heure</label>
                <div class="time-slots">
                    {{range $index, $value := .AvailebleDates}}
                        <button type="button" name="time" class="btn btn-outline" onclick="onTimePick(this)" data-index="{{$index}}">{{$value}}</button>
                    {{end}}
                </div>
              </div>
            </div>
          </div>
          {{end}}
          
          <!-- Récapitulatif du rendez-vous -->
          <div class="summary-section">
            <h3 class="summary-title">Récapitulatif du rendez-vous</h3>
            <div id="summary-content">
              <div class="summary-item">
                <span class="summary-label">Employé:</span>
                <span class="summary-value" id="summary-employee">{{.Appointment.EmployeeName}}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Date:</span>
                <span class="summary-value" id="summary-date">{{.Appointment.FormatDate}}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Heure:</span>
                <span class="summary-value" id="summary-time">{{slice .Appointment.Date 11 16}}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Service:</span>
                <span class="summary-value" id="summary-services">{{.Appointment.Service}} ({{.Appointment.Price}})</span>
              </div>
            </div>
          </div>
          
          {{if eq .Appointment.Status "Confirmé"}}
                <div class="card-footer">
                  <button type="submit" class="btn btn-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                      <polyline points="17 21 17 13 7 13 7 21"></polyline>
                      <polyline points="7 3 7 8 15 8"></polyline>
                    </svg>
                    Enregistrer les modifications
                  </button>

                  <button type="button" class="btn btn-success" id="btn-complete">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                      <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                    Marquer comme terminé
                  </button>
                  <button type="button" class="btn btn-danger" id="btn-cancel" data-id="{{.Appointment.Id}}" onclick="onOpenCancelModal(this)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <line x1="15" y1="9" x2="9" y2="15"></line>
                      <line x1="9" y1="9" x2="15" y2="15"></line>
                    </svg>
                    Annuler le rendez-vous
                  </button>
                </div>
          {{end}}
      </form>
    </div>
  </div>
  
  <div class="modal-overlay" id="cancel-modal"></div>
  <script>
        const creneaux = 30
        let totalDuration = 30
        const cancelModal = document.getElementById("cancel-modal")

        const dateInput = document.getElementById("date")
        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        const formattedToday = `${yyyy}-${mm}-${dd}`;
        dateInput.min = formattedToday;

        cancelModal.addEventListener("click", (ev)=>{
            if (ev.target.id === "cancel-modal"){
                cancelModal.style.display = "none"
            }
        })

        const onOpenCancelModal = (ele)=>{
            cancelModal.style.display = "flex"
            cancelModal.innerHTML = `
                <div class="modal">
                  <div class="modal-header">
                    <h3 class="modal-title">Annuler le rendez-vous</h3>
                  </div>
                  <div class="modal-body">
                    <p class="modal-text">Êtes-vous sûr de vouloir annuler ce rendez-vous ? Cette action est irréversible.</p>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-outline" id="cancel-modal-close" onclick="cancelModal.style.display = 'none'">Retour</button>
                    <button type="button" class="btn btn-danger" id="confirm-cancel" hx-delete="/rendez-vous/${ele.dataset.id}">Confirmer l'annulation</button>
                  </div>
                </div>

            `
            htmx.process(document.body)
        }

        const onServiceChange = (ele)=>{
            const times = document.querySelectorAll('[name="time"]')
            onUpdateTime(times)
        }

        const onUpdateTime = (times)=>{
            if(times.length < 1) return
            for(const t of times){
                t.disabled = false
                t.removeAttribute("selected")
            }
            const durations = document.querySelectorAll(".form-checkbox:checked ~ input[type='number']")
            totalDuration = 0
            for(const d of durations){
                totalDuration  += parseInt(d.value)
            }
            totalDuration = Math.round(totalDuration / creneaux)
            for(let i = times.length - totalDuration + 1; i < times.length; i++){
                times[i].disabled = true
            }
        }

        const onTimePick = (ele)=>{
            const times = document.querySelectorAll('[name="time"]')
            onUpdateTime(times)
            if (parseInt(ele.dataset.index) + totalDuration > times.length) return
            let currentEle = ele
            currentEle.disabled = true
            currentEle.setAttribute("selected", "")
            for(let i = 1; i < totalDuration; i++){
                currentEle = currentEle.nextElementSibling
                if(!currentEle) break
                currentEle.disabled = true
                currentEle.setAttribute("selected", "")
            }
        }

  </script>
{{end}}
