{{define "Head"}}
<title>Planning</title>
<link rel="stylesheet" href="/static/planning.css" />
<style>
.container{
    max-width: 1200px;
    margin: 10px auto;
    #calendar{
        margin: 0px auto;
        border-radius: 10px;
        width: 100%;
        max-width: 415px;
        height: fit-content;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        margin-bottom: 1rem;
        background-color: var(--card-color);
        #date{
          display: none;
        }
        #header{
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px;
          border-bottom: 1px solid var(--border-color);
          #displayDate{
            font-size: 1.2rem;
            font-weight: 600;
          }
          .command{
            display: flex;
            gap: .5rem;
            .btn{
                width: 32px;
                aspect-ratio: 1/1;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 5px;
            } 
          }
        }
        #container{
            padding: 15px;
            #days, #daysNames{
            display: grid;
            grid-template-columns: repeat(7,  1fr);
            gap: 4px;
            .dayBtn{
                border: none;
                outline: none;
                border-radius: 50%;
                aspect-ratio: 1/1;
            }
            .dayBtn[disabled]{
                color: var(--border-color);
            }
            .dayBtn.selected{
                background-color: var(--primary-color);   
                color: white;
                transition: background-color .4s linear;
                @starting-style{
                  background-color: white;
                }
            }
            .name{
                line-height: 1.5rem;
                text-align: center;
                color: darkgray;
            }
          }
        }
    }
    #schedule{
        .card.htmx-swapping{
            opacity: 0;
            transform: translateX(100px);
            transition: all 500ms linear;
        }
        .dayRecap{
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
            margin-bottom: 1rem;
            .info{
                aspect-ratio: 1 / 1;
                background-color: var(--card-color);
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
                border-radius: 10px;
                box-shadow: var(--card-shadow);
                .number{
                    font-size: 2rem;
                    color: var(--primary-color);
                }
                .label{
                    color: var(--text-color-helper);
                }
            }
        }
        .card{
            --card-height: 232px;
            position: relative;
            margin: 0 auto;
            border-radius: 10px;
            margin-bottom: 1rem;
            background-color: var(--card-color);
            box-shadow: var(--card-shadow);
            .client{
                padding: 15px;
                .client-group{
                    display: flex;
                    gap: .5rem;
                    align-items: center;
                    margin-bottom: .3rem;
                    .icon{
                        width: 1.5rem;
                        aspect-ratio: 1/1;
                    }
                    .label{
                        font-size: .85rem;
                        color: darkgray;
                    }
                    .info{
                        font-weight: 600;
                    }
                }
            }
            .footer{
                display: flex;
                overflow: hidden;
                border-bottom-right-radius: 10px;
                border-bottom-left-radius: 10px;
                .footerBtn{
                    display: block;
                    width: 100%;
                    padding-block: 15px;
                    border-top: 1px solid var(--border-color);
                    outline: none;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 200ms linear;
                    text-align: center;
                    &:nth-child(2){
                        border-left: 1px solid var(--border-color);
                    }
                }
                .deleteBtn{
                    color: var(--warning-btn-color);
                    &:hover{
                        background-color: var(--warning-btn-color);
                        color: white;
                    }
                }
                .updateBtn{
                    color: var(--primary-color);
                    &:hover{
                        color: white;
                        background-color: var(--primary-color);
                    }
                }
            }
            &:after{
                content: "";
                position: absolute;
                left: -20px;
                top: 5px;
                width: 10px;
                border-radius: 50%;
                aspect-ratio: 1/1;
                outline: 3px solid darkgray;
            }
            &:last-child:before{
                display: none;
            }
            &:before{
                content: "";
                position: absolute;
                left: -16px;
                top: 16px;
                height: var(--card-height);
                width: 2px;
                background-color: darkgray;
            }
        }
        .happend{
            &:after{
                background-color: var(--primary-color);
                outline: 3px solid var(--primary-color);
            }
            &:before{
                background-color: var(--primary-color);
            }
        }
        .now{
            outline: 1px solid var(--primary-color);
          &:after{
            background-color: var(--primary-color);
            outline: 3px solid var(--primary-color);
            animation: currentFrametime 1s linear infinite;
          }
        }
        
        .offday{
            max-width: 750px;
            margin: 0px auto;
            background-color: var(--card-color);
            box-shadow: var(--card-shadow);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            .date-display{
                margin-bottom: 1rem;
            }
            .empty-icon{
                width: 60px;
                aspect-ratio: 1/1;
                margin-bottom: 1rem;
            }
            .header{
                font-size: 1.2rem;
                margin-bottom: .5rem;
            }
            .info{
                color: #8f8f8f;
            }
        }
    }
}

.modal-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 50;
    display: none;
    .modal {
        background-color: var(--card-color);
        border-radius: 0.5rem;
        width: 90%;
        max-width: 28rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        color: var(--text-color);
        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            .modal-title {
              font-size: 1.125rem;
              font-weight: 600;
            }
        }
        .modal-body {
            padding: 1.5rem;
            .modal-text {
              font-size: 0.95rem;
              color: var(--text-color-helper);
              margin-bottom: 1rem;
            }
        }
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
            .btn{
                padding: 0.625rem .5rem;
                border-radius: 0.375rem;
                font-size: .9rem;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.15s ease;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
            }
        }
    }
}

@keyframes currentFrametime{
  50%{
    transform: scale(1.5);
  }
  100%{
    transform: scale(1);
  }
}
@media (min-width: 760px){
    .container{
        display: grid;
        grid-template-columns: .8fr 1fr;
        gap: 1rem;
    }
}
#user{
margin: auto;
}
    </style>
{{end}}

{{define "Body"}}
    <div class="container">
        <div id="calendar">
            <div id="header">
                <p id="displayDate"></p>
                <div class="command">
                    <button type="button" class="btn btn-outline" data-command="Prev" onclick="onChangeMonth(this)">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="15 18 9 12 15 6"></polyline>
                    </svg>
                    </button>
                    <button type="button" class="btn btn-outline" data-command="Next" onclick="onChangeMonth(this)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="9 18 15 12 9 6"></polyline>
                        </svg>
                    </button>
                </div>
            </div>
            <div id="container">
                <div id="daysNames">
                  <p class="name">Lu</p>
                  <p class="name">Ma</p>
                  <p class="name">Me</p>
                  <p class="name">Je</p>
                  <p class="name">Ve</p>
                  <p class="name">Sa</p>
                  <p class="name">Di</p>
                </div>
                <div id="days"></div>
            </div>
            <input type="date" name="date" id="date" />
        </div>
        {{template "Planning" .}}
        <div class="modal-overlay" id="cancel-modal"></div>
    </div>
    <script>
        const dateInput = document.getElementById("#planning-date")
        //const today = new Date();
        //const yyyy = today.getFullYear();
        //const mm = String(today.getMonth() + 1).padStart(2, '0');
        //const dd = String(today.getDate()).padStart(2, '0');
        //const formattedToday = `${yyyy}-${mm}-${dd}`;
        //dateInput.min = formattedToday;

        const days = document.getElementById("days")
        const currentDate = document.getElementById("displayDate")
        const inputDate = document.getElementById("date")
        
        const month_names = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]
        
        const date = new Date()
        let selectedDate = new Date()
        let currentMonth = date.getMonth()

        const cancelModal = document.getElementById("cancel-modal")
        
        cancelModal.addEventListener("click", (ev)=>{
            if (ev.target.id === "cancel-modal"){
                cancelModal.style.display = "none"
            }
        })

        const onCancelAppointment = (id)=>{
            cancelModal.style.display = "flex"
            cancelModal.innerHTML = `
                <div class="modal">
                  <div class="modal-header">
                    <h3 class="modal-title">Annuler le rendez-vous</h3>
                  </div>
                  <div class="modal-body">
                    <p class="modal-text">Êtes-vous sûr de vouloir annuler ce rendez-vous ? Cette action est irréversible.</p>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-outline" id="cancel-modal-close" onclick="cancelModal.style.display = 'none'">Retour</button>
                    <button type="button" class="btn btn-danger" id="confirm-cancel" hx-delete="/rendez-vous/${id}" hx-swap="delete swap:500ms" hx-target="#appointment${id}" 
                    onclick="cancelModal.style.display = 'none'">Confirmer l'annulation</button>
                  </div>
                </div>

            `
            htmx.process(document.body)
        }
        
        const init = ()=>{
            date.setDate(1)
            currentDate.innerHTML = `${month_names[date.getMonth()]} ${date.getFullYear()}`
            
            const [day, month, year] = selectedDate.toLocaleDateString("fr-FR", {year: "numeric", month: "2-digit", day: "2-digit"}).split("/")
            inputDate.value = `${year}-${month}-${day}`
            let arrayOfDays = new Array(7*5).fill(0)
            updateDays()
        }
        
        const updateDays = ()=>{
            currentDate.innerHTML = `${month_names[date.getMonth()]} ${date.getFullYear()}`
            const startOfTheWeek = date.getDay() === 0 ? 6 : date.getDay() - 1
            if(startOfTheWeek > 5) arrayOfDays = new Array(7*6).fill(0)
            else arrayOfDays = new Array(7*5).fill(0)
            date.setDate(date.getDate() - startOfTheWeek)
            days.innerHTML = ""
            for(let i = 0; i < arrayOfDays.length; i++){
                days.innerHTML += `<button type="button" class="dayBtn btn-outline ${selectedDate.getMonth() === date.getMonth() && selectedDate.getDate() === date.getDate() && 'selected'}" ${date.getMonth() !== currentMonth ? 'disabled' : ''} onclick="onDaySelect(this)" hx-post="/planning" hx-target="#schedule" hx-ext="json-enc-custom" hx-include="#date">${date.getDate()}</button>`
                date.setDate(date.getDate() + 1)
            }
            htmx.process(document.body)
        }
        
        const onChangeMonth = (ele)=>{
            if(ele.dataset.command === "Next"){
                date.setMonth(currentMonth === 11 ? currentMonth + 1 - 12 : currentMonth + 1, 1)
            }else{
                date.setMonth(currentMonth - 1, 1)
            }
            currentMonth = date.getMonth()
            updateDays()
        }
        
        const onDaySelect = (ele)=>{
            selectedDate.setMonth(currentMonth, parseInt(ele.innerHTML))
            const buttons = document.querySelectorAll(".dayBtn")
            for(const btn of buttons){
              btn.classList.remove("selected")
            }
            ele.classList.add("selected")
            const [day, month, year] = selectedDate.toLocaleDateString("fr-FR", {year: "numeric", month: "2-digit", day: "2-digit"}).split("/")
            inputDate.value = `${year}-${month}-${day}`
        }
        
        init()

    </script>
{{end}}
