{{define "Head"}}
    <title>Rendez-vous {{.Etablishment.Name}}</title>
    <style>
        .card{
            max-width: 1000px;
            margin: 0 auto;
            background-color: var(--card-color);
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            overflow: hidden;
            margin-block: 10px;
            container: card / inline-size;
            .card-header {
                padding: 1.5rem;
                border-bottom: 1px solid #e5e7eb;
                .card-title {
                  font-size: 1.5rem;
                  font-weight: 600;
                  margin-bottom: 0.5rem;
                }
                
                .card-description {
                  color: var(--text-color-helper);
                  font-size: 1rem;
                }
            }
            #appointment{
                padding: 1.5rem;
                .form-group {
                    margin-bottom: 1.5rem;
                    .form-label {
                        display: block;
                        font-size: 1rem;
                        font-weight: 600;
                        margin-bottom: 0.5rem;
                    }
                    .input-wrapper {
                        display: flex;
                        align-items: center;
                        gap: 0.5rem;
                        .input-icon {
                            width: 1rem;
                            height: 1rem;
                            color: #6b7280;
                        }
                        .helper-text {
                            font-size: 0.9rem;
                            color: var(--text-color-helper);
                            margin-top: 0.25rem;
                        }
                    }
                    .checkbox-group {
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        margin-top: 0.5rem;
                        .checkbox-wrapper {
                            display: flex;
                            align-items: center;
                            gap: 0.5rem;
                            line-height: 2rem;
                            .form-checkbox {
                                width: 1rem;
                                height: 1rem;
                                border-radius: 0.25rem;
                                border: 1px solid #d1d5db;
                                appearance: none;
                                background-color: white;
                                cursor: pointer;
                            }
                            
                            .form-checkbox:checked {
                                background-color: var(--primary-color);
                                border-color: var(--primary-color);
                                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/%3E%3C/svg%3E");
                                background-repeat: no-repeat;
                                background-position: center;
                                background-size: 0.75rem;
                            }
                            .checkbox-label {
                                font-size: 0.875rem;
                                color: var(--text-color);
                            }
                        }
                    }
                }
            }
            .user{
                display: flex;
                align-items: center;
                gap: .5rem;
                margin-bottom: .5rem;
                .name{
                    width: 100%;
                    display: flex;
                    justify-content: space-between;
                    &:has(> .radioBtn:checked){
                        font-weight: bold;
                    }
                    .radioBtn{
                        float: right;
                        outline: none;
                    }
                }
                .photo{
                    width: 2rem;
                    aspect-ratio: 1/1;
                    border-radius: 50%;
                }
                .btn{
                    padding: .5rem 2rem;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: white;
                    font-weight: bold;
                }
            }
            .date{
                display: flex;
                align-items: center;
                gap: .5rem;
                margin-bottom: 1rem;
                #date{
                    height: 2rem;
                    border: 1px solid var(--border-color);
                    border-radius: 5px;
                    padding-inline: 5px;
                }
            }

            .btn{
                padding: .5rem 2rem;
                border-radius: 5px;
                font-weight: bold;
                display: inline-block;
                width: 100%;
            }
            #time{
                margin-bottom: 1rem;
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                justify-content: space-between;
                gap: .7rem;
                &:has(> .notime){
                    display: block;
                }
                .notime{
                    width: 100%;
                    margin-inline: auto;
                    border-radius: 10px;
                    outline: 1px solid var(--border-color);
                    padding: 15px;
                    .notime-header{
                        font-size: 1.2rem;
                        text-align: center;
                        margin-bottom: .5rem;
                    }
                    .notime-message{
                        display: flex;
                        gap: .5rem;
                        align-items: center;
                        justify-content: center;
                        .icon{
                            height: 2rem;
                            aspect-ratio: 1/1;
                        }
                        .info{
                            color: var(--text-color-helper);
                            width: calc(100% - 2.5rem);
                        }
                    }
                }
                .btn{
                    padding-inline: 1rem;
                    &[disabled]{
                        background-color: var(--button-bg-disabled);
                        color: gray;
                        cursor: auto;
                    }
                    &[selected]{
                        background-color: var(--primary-color);
                        font-weight: 600;
                        color: white;
                    }
                }
            }
        }

            @container card (width < 640px){
                .checkbox-group{
                    grid-template-columns: 1fr !important;
                }
            }
    </style>
{{end}}

{{define "Body"}}
    {{$id := .Etablishment.Id}}
    <div class="card">
        <div class="card-header">
            <h1 class="card-title">Réservation</h1>
            <p class="card-description">Choisissez un employé, des services et une date pour votre rendez-vous</p>
        </div>
        <form id="appointment" hx-post="/etablissement/{{.Etablishment.Id}}/rendez-vous/nouveau" hx-ext="json-enc-custom" hx-swap="none" hx-vals='js:{...getServices()}'>
            <div class="user">
                <img src="/static/location.svg" class="photo" />
                <p class="name">{{.Etablishment.Name}} <input type="radio" class="radioBtn" name="employee" value="{{.Etablishment.Id}}" checked hx-put="/etablissement/{{$id}}/rendez-vous/nouveau" 
                hx-swap="innerHTML" hx-target="#time" hx-ext="json-enc-custom" hx-include="[name='date']" /></p>
            </div>
            {{range .Etablishment.Employee}}
                {{if .Id}}
                    <div class="user">
                        <img src="/static/location.svg" class="photo" />
                        <p class="name">{{.Name}} <input type="radio" class="radioBtn" name="employee" value="{{.Id}}" 
                        hx-put="/etablissement/{{$id}}/rendez-vous/nouveau" hx-swap="innerHTML" hx-target="#time" hx-ext="json-enc-custom" hx-include="[name='date']" /></p>
                    </div>
                {{end}}
            {{end}}
            <div class="form-group">
                <label class="form-label">Services souhaités</label>
                <div class="input-wrapper">
                  <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
                  </svg>
                  <span class="helper-text">Sélectionnez les services que vous souhaitez réserver</span>
                </div>
                <div class="checkbox-group">
                    {{range $index, $element := .Etablishment.Service}}
                    <div class="checkbox-wrapper">
                        <input type="checkbox" id="{{$element.Id}}" name="service[{{$index}}][id]" {{if eq $element.Checked true}}checked{{end}} value="{{$element.Id}}" 
                        class="form-checkbox" onclick="onServiceChange(this)">
                        <label for="{{$element.Id}}" class="checkbox-label">{{$element.Name}} ({{.Price}})</label>
                        <input type="number" name="service[{{$index}}][duration]" value="{{$element.Duration}}" class="hidden" />
                    </div>
                    {{end}}
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">Date et heure du rendez-vous</label>
                <div class="input-wrapper">
                  <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  <span class="helper-text">Choisissez la date et l'heure qui vous conviennent</span>
                </div>
            </div>
            <div class="date">
                <label for="date">Date</label>
                <input type="date" id="date" name="date" min="" required 
                hx-put="/etablissement/{{.Etablishment.Id}}/rendez-vous/nouveau" hx-target="#time" hx-swap="innerHTML" hx-ext="json-enc-custom" hx-include="[name='employee']" />
            </div>
            <p style="margin-bottom: .5rem;">Heure</p>
            <div id="time">
                
            </div>
            <button type="submit" class="btn btn-primary">Confirmer</button>
        </form>
    </div>

    <script>
        
        const creneaux = 30
        let totalDuration = 30
        const appointment = document.getElementById("appointment")
        const dateInput = document.getElementById("date")
        const services = document.querySelectorAll(".service-value")

        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        const formattedToday = `${yyyy}-${mm}-${dd}`;
        dateInput.min = formattedToday;
        dateInput.value = formattedToday

        appointment.addEventListener("htmx:beforeRequest", (e)=>{
            const time = document.querySelectorAll(".btn[disabled]")
            if(dateInput.value === "" || time.length === 0 && e.detail.elt.id === "appointment") e.preventDefault()
        })

        const onServiceChange = (ele)=>{
            const times = document.querySelectorAll('[name="time"]')
            onUpdateTime(times)
        }

        const onUpdateTime = (times)=>{
            if(times.length < 1) return
            for(const t of times){
                t.disabled = false
                t.removeAttribute("selected")
            }
            const durations = document.querySelectorAll(".form-checkbox:checked ~ input[type='number']")

            totalDuration = 0
            for(const d of durations){
                totalDuration  += parseInt(d.value)
            }
            totalDuration = Math.round(totalDuration / creneaux)
            for(let i = times.length - totalDuration + 1; i < times.length; i++){
                times[i].disabled = true
            }
        }

        const onTimePick = (ele)=>{
            const times = document.querySelectorAll('[name="time"]')
            onUpdateTime(times)
            if (parseInt(ele.dataset.index) + totalDuration > times.length) return
            let currentEle = ele
            currentEle.disabled = true
            currentEle.setAttribute("selected", "")
            for(let i = 1; i < totalDuration; i++){
                currentEle = currentEle.nextElementSibling
                if(!currentEle) break
                currentEle.disabled = true
                currentEle.setAttribute("selected", "")
            }
        }

        const getServices = ()=>{
            const time = document.querySelector('.btn[selected]')
            if (!time) return
            return {time: time.innerHTML}
        }
    </script>
{{end}}
